---

- name: Test if files from stale VM exist
  stat: path="{{ vm_images_dir }}"
  register: vm_dir_stat

- name: Fail if files from stale VM exist
  fail: msg="VM directory already exists ({{ vm_images_dir }}) use vm_erase playbook to clean stale files"
  when: vm_dir_stat.stat.exists

- name: Ensure required dirs are present
  become: true
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ vm_seeds_user_data|dirname }}"
    - "{{ vm_seeds_meta_data|dirname }}"
    - "{{ vm_seeds_image_name|dirname }}"
    - "{{ vm_system_disk_image|dirname }}"
    - "{{ vm_data_disk_image|dirname }}"
    - "{{ os_file|dirname }}"

- name: Create qcow2 image (system disc)
  become: yes
  command: qemu-img create -f qcow2 -b "{{ os_file }}" "{{ vm_system_disk_image }}" "{{ system_disk_size }}"
  changed_when: true

- name: Test if data disk already exists
  stat: path="{{ vm_data_disk_image }}"
  register: data_disk_stat

- name: Set fact data_disk_already_exists
  set_fact: data_disk_already_exists="{{ data_disk_stat.stat.exists }}"

- name: Create qcow2 image (data disc)
  become: yes
  command: qemu-img create -f qcow2 "{{ vm_data_disk_image }}" "{{ data_disk_size }}"
  when: data_disk_size is defined and not data_disk_already_exists

- name: Templatize host user-data
  become: yes
  template:
    src: user-data.yml.j2
    dest: "{{ vm_seeds_user_data }}"

- name: Templatize host meta-data
  become: yes
  template:
    src: meta-data.yml.j2
    dest: "{{ vm_seeds_meta_data }}"

- name: create ci image
  become: yes
  command: "{{ item }}"
  args:
    chdir: "{{ vm_seeds_meta_data|dirname }}"
  with_items:
    - genisoimage -output {{ vm_seeds_image_name }} -volid cidata -joliet -rock .
  changed_when: true

- name: Create / Start VM
  become: yes
  command: >
    virt-install
        --hvm
        --controller type=scsi,model=virtio-scsi
        --name={{ inventory_hostname }}
        --vcpus={{ cores }}
        --memballoon virtio
        --memory={{ base_memory }}
        --os-type=linux
        --os-variant={{ os.variant }}
        --import
        --network bridge=br0,mac={{ mac_address }},model=virtio
        --disk {{ vm_system_disk_image }},format=qcow2,discard=unmap,bus=scsi
        --noautoconsole {% if data_disk_size is defined %}--disk {{ vm_data_disk_image }},format=qcow2,discard=unmap,bus=scsi{% endif %}
        --disk {{ vm_seeds_image_name }},device=cdrom
  changed_when: true

- name: Waiting for boot
  local_action: wait_for host={{ ansible_ssh_host }} port={{ ansible_port }} state=started